/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FlightTicket {
  export type DataTransportObjectStruct = {
    latitude: BigNumberish;
    longitude: BigNumberish;
    description: string;
    temperature: BigNumberish;
    minTemp: BigNumberish;
    windSpeed: BigNumberish;
    windDeg: BigNumberish;
  };

  export type DataTransportObjectStructOutput = [
    latitude: bigint,
    longitude: bigint,
    description: string,
    temperature: bigint,
    minTemp: bigint,
    windSpeed: bigint,
    windDeg: bigint
  ] & {
    latitude: bigint;
    longitude: bigint;
    description: string;
    temperature: bigint;
    minTemp: bigint;
    windSpeed: bigint;
    windDeg: bigint;
  };
}

export declare namespace IJsonApi {
  export type RequestBodyStruct = {
    url: string;
    postprocessJq: string;
    abi_signature: string;
  };

  export type RequestBodyStructOutput = [
    url: string,
    postprocessJq: string,
    abi_signature: string
  ] & { url: string; postprocessJq: string; abi_signature: string };

  export type ResponseBodyStruct = { abi_encoded_data: BytesLike };

  export type ResponseBodyStructOutput = [abi_encoded_data: string] & {
    abi_encoded_data: string;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IJsonApi.RequestBodyStruct;
    responseBody: IJsonApi.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IJsonApi.RequestBodyStructOutput,
    responseBody: IJsonApi.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IJsonApi.RequestBodyStructOutput;
    responseBody: IJsonApi.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IJsonApi.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IJsonApi.ResponseStructOutput
  ] & { merkleProof: string[]; data: IJsonApi.ResponseStructOutput };
}

export interface FlightTicketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FIAT_priceDecimals"
      | "NATIVE_TOKEN"
      | "SLIPPAGE_TOLERANCE_BPS"
      | "abiSignatureHack"
      | "createFlight"
      | "flights"
      | "getFlightDetails"
      | "getUsdToTokenPrice"
      | "owner"
      | "payForFlight"
      | "refundTicket"
      | "renounceOwnership"
      | "tickets"
      | "tokenToPythPriceId"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FlightCreated"
      | "FlightTicketPurchased"
      | "FlightTicketWithdrawn"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FIAT_priceDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NATIVE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SLIPPAGE_TOLERANCE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "abiSignatureHack",
    values: [FlightTicket.DataTransportObjectStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createFlight",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flights",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlightDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdToTokenPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payForFlight",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refundTicket",
    values: [BigNumberish, IJsonApi.ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToPythPriceId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "FIAT_priceDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NATIVE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SLIPPAGE_TOLERANCE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "abiSignatureHack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFlight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flights", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFlightDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdToTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payForFlight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenToPythPriceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace FlightCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    route: string,
    date: BigNumberish,
    amountPaid: BigNumberish,
    payer: AddressLike
  ];
  export type OutputTuple = [
    id: bigint,
    route: string,
    date: bigint,
    amountPaid: bigint,
    payer: string
  ];
  export interface OutputObject {
    id: bigint;
    route: string;
    date: bigint;
    amountPaid: bigint;
    payer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlightTicketPurchasedEvent {
  export type InputTuple = [
    ticketId: BigNumberish,
    route: string,
    date: BigNumberish,
    weatherCondition: string,
    refundStatus: string,
    amountPaid: BigNumberish,
    payer: AddressLike
  ];
  export type OutputTuple = [
    ticketId: bigint,
    route: string,
    date: bigint,
    weatherCondition: string,
    refundStatus: string,
    amountPaid: bigint,
    payer: string
  ];
  export interface OutputObject {
    ticketId: bigint;
    route: string;
    date: bigint;
    weatherCondition: string;
    refundStatus: string;
    amountPaid: bigint;
    payer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlightTicketWithdrawnEvent {
  export type InputTuple = [
    ticketId: BigNumberish,
    flightId: BigNumberish,
    route: string,
    date: BigNumberish,
    weatherCondition: string,
    refundStatus: string,
    amountPaid: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    ticketId: bigint,
    flightId: bigint,
    route: string,
    date: bigint,
    weatherCondition: string,
    refundStatus: string,
    amountPaid: bigint,
    recipient: string
  ];
  export interface OutputObject {
    ticketId: bigint;
    flightId: bigint;
    route: string;
    date: bigint;
    weatherCondition: string;
    refundStatus: string;
    amountPaid: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlightTicket extends BaseContract {
  connect(runner?: ContractRunner | null): FlightTicket;
  waitForDeployment(): Promise<this>;

  interface: FlightTicketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FIAT_priceDecimals: TypedContractMethod<[], [bigint], "view">;

  NATIVE_TOKEN: TypedContractMethod<[], [string], "view">;

  SLIPPAGE_TOLERANCE_BPS: TypedContractMethod<[], [bigint], "view">;

  abiSignatureHack: TypedContractMethod<
    [dto: FlightTicket.DataTransportObjectStruct],
    [void],
    "view"
  >;

  createFlight: TypedContractMethod<
    [_route: string, _date: BigNumberish, _amountInUsd: BigNumberish],
    [void],
    "nonpayable"
  >;

  flights: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        id: bigint;
        route: string;
        date: bigint;
        amountInUsd: bigint;
      }
    ],
    "view"
  >;

  getFlightDetails: TypedContractMethod<
    [_flightId: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        flightId: bigint;
        route: string;
        date: bigint;
        amountPaid: bigint;
      }
    ],
    "view"
  >;

  getUsdToTokenPrice: TypedContractMethod<
    [token: AddressLike, amountInUsd: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  payForFlight: TypedContractMethod<
    [flightId: BigNumberish, token: AddressLike, amountInUsd: BigNumberish],
    [void],
    "payable"
  >;

  refundTicket: TypedContractMethod<
    [ticketId: BigNumberish, _proof: IJsonApi.ProofStruct],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  tickets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        bigint,
        string,
        string,
        bigint,
        string,
        string,
        boolean
      ] & {
        ticketId: bigint;
        flightId: bigint;
        route: string;
        date: bigint;
        weatherCondition: string;
        refundStatus: string;
        amountInUsd: bigint;
        payer: string;
        token: string;
        isWithdrawn: boolean;
      }
    ],
    "view"
  >;

  tokenToPythPriceId: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [_ticketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FIAT_priceDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NATIVE_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SLIPPAGE_TOLERANCE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "abiSignatureHack"
  ): TypedContractMethod<
    [dto: FlightTicket.DataTransportObjectStruct],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "createFlight"
  ): TypedContractMethod<
    [_route: string, _date: BigNumberish, _amountInUsd: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flights"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        id: bigint;
        route: string;
        date: bigint;
        amountInUsd: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFlightDetails"
  ): TypedContractMethod<
    [_flightId: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        flightId: bigint;
        route: string;
        date: bigint;
        amountPaid: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUsdToTokenPrice"
  ): TypedContractMethod<
    [token: AddressLike, amountInUsd: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payForFlight"
  ): TypedContractMethod<
    [flightId: BigNumberish, token: AddressLike, amountInUsd: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "refundTicket"
  ): TypedContractMethod<
    [ticketId: BigNumberish, _proof: IJsonApi.ProofStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tickets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        bigint,
        string,
        string,
        bigint,
        string,
        string,
        boolean
      ] & {
        ticketId: bigint;
        flightId: bigint;
        route: string;
        date: bigint;
        weatherCondition: string;
        refundStatus: string;
        amountInUsd: bigint;
        payer: string;
        token: string;
        isWithdrawn: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenToPythPriceId"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_ticketId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "FlightCreated"
  ): TypedContractEvent<
    FlightCreatedEvent.InputTuple,
    FlightCreatedEvent.OutputTuple,
    FlightCreatedEvent.OutputObject
  >;
  getEvent(
    key: "FlightTicketPurchased"
  ): TypedContractEvent<
    FlightTicketPurchasedEvent.InputTuple,
    FlightTicketPurchasedEvent.OutputTuple,
    FlightTicketPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "FlightTicketWithdrawn"
  ): TypedContractEvent<
    FlightTicketWithdrawnEvent.InputTuple,
    FlightTicketWithdrawnEvent.OutputTuple,
    FlightTicketWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "FlightCreated(uint256,string,uint256,uint256,address)": TypedContractEvent<
      FlightCreatedEvent.InputTuple,
      FlightCreatedEvent.OutputTuple,
      FlightCreatedEvent.OutputObject
    >;
    FlightCreated: TypedContractEvent<
      FlightCreatedEvent.InputTuple,
      FlightCreatedEvent.OutputTuple,
      FlightCreatedEvent.OutputObject
    >;

    "FlightTicketPurchased(uint256,string,uint256,string,string,uint256,address)": TypedContractEvent<
      FlightTicketPurchasedEvent.InputTuple,
      FlightTicketPurchasedEvent.OutputTuple,
      FlightTicketPurchasedEvent.OutputObject
    >;
    FlightTicketPurchased: TypedContractEvent<
      FlightTicketPurchasedEvent.InputTuple,
      FlightTicketPurchasedEvent.OutputTuple,
      FlightTicketPurchasedEvent.OutputObject
    >;

    "FlightTicketWithdrawn(uint256,uint256,string,uint256,string,string,uint256,address)": TypedContractEvent<
      FlightTicketWithdrawnEvent.InputTuple,
      FlightTicketWithdrawnEvent.OutputTuple,
      FlightTicketWithdrawnEvent.OutputObject
    >;
    FlightTicketWithdrawn: TypedContractEvent<
      FlightTicketWithdrawnEvent.InputTuple,
      FlightTicketWithdrawnEvent.OutputTuple,
      FlightTicketWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
