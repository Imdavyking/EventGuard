/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type StarWarsCharacterStruct = {
  name: string;
  numberOfMovies: BigNumberish;
  apiUid: BigNumberish;
  bmi: BigNumberish;
};

export type StarWarsCharacterStructOutput = [
  name: string,
  numberOfMovies: bigint,
  apiUid: bigint,
  bmi: bigint
] & { name: string; numberOfMovies: bigint; apiUid: bigint; bmi: bigint };

export declare namespace IJsonApi {
  export type RequestBodyStruct = {
    url: string;
    postprocessJq: string;
    abi_signature: string;
  };

  export type RequestBodyStructOutput = [
    url: string,
    postprocessJq: string,
    abi_signature: string
  ] & { url: string; postprocessJq: string; abi_signature: string };

  export type ResponseBodyStruct = { abi_encoded_data: BytesLike };

  export type ResponseBodyStructOutput = [abi_encoded_data: string] & {
    abi_encoded_data: string;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IJsonApi.RequestBodyStruct;
    responseBody: IJsonApi.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IJsonApi.RequestBodyStructOutput,
    responseBody: IJsonApi.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IJsonApi.RequestBodyStructOutput;
    responseBody: IJsonApi.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IJsonApi.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IJsonApi.ResponseStructOutput
  ] & { merkleProof: string[]; data: IJsonApi.ResponseStructOutput };
}

export interface IStarWarsCharacterListInterface extends Interface {
  getFunction(
    nameOrSignature: "addCharacter" | "getAllCharacters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCharacter",
    values: [IJsonApi.ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCharacters",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCharacter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCharacters",
    data: BytesLike
  ): Result;
}

export interface IStarWarsCharacterList extends BaseContract {
  connect(runner?: ContractRunner | null): IStarWarsCharacterList;
  waitForDeployment(): Promise<this>;

  interface: IStarWarsCharacterListInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCharacter: TypedContractMethod<
    [data: IJsonApi.ProofStruct],
    [void],
    "nonpayable"
  >;

  getAllCharacters: TypedContractMethod<
    [],
    [StarWarsCharacterStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCharacter"
  ): TypedContractMethod<[data: IJsonApi.ProofStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllCharacters"
  ): TypedContractMethod<[], [StarWarsCharacterStructOutput[]], "view">;

  filters: {};
}
