/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IPriceSubmitterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getFtsoManager"
      | "getFtsoRegistry"
      | "getVoterWhitelister"
      | "revealPrices"
      | "submitPriceHashes"
      | "voterWhitelistBitmap"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PriceHashesSubmitted" | "PricesRevealed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getFtsoManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterWhitelister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealPrices",
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitPriceHashes",
    values: [BigNumberish, BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "voterWhitelistBitmap",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFtsoManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterWhitelister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitPriceHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterWhitelistBitmap",
    data: BytesLike
  ): Result;
}

export namespace PriceHashesSubmittedEvent {
  export type InputTuple = [
    submitter: AddressLike,
    epochId: BigNumberish,
    ftsos: AddressLike[],
    hashes: BytesLike[],
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    submitter: string,
    epochId: bigint,
    ftsos: string[],
    hashes: string[],
    timestamp: bigint
  ];
  export interface OutputObject {
    submitter: string;
    epochId: bigint;
    ftsos: string[];
    hashes: string[];
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PricesRevealedEvent {
  export type InputTuple = [
    voter: AddressLike,
    epochId: BigNumberish,
    ftsos: AddressLike[],
    prices: BigNumberish[],
    randoms: BigNumberish[],
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    epochId: bigint,
    ftsos: string[],
    prices: bigint[],
    randoms: bigint[],
    timestamp: bigint
  ];
  export interface OutputObject {
    voter: string;
    epochId: bigint;
    ftsos: string[];
    prices: bigint[];
    randoms: bigint[];
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPriceSubmitter extends BaseContract {
  connect(runner?: ContractRunner | null): IPriceSubmitter;
  waitForDeployment(): Promise<this>;

  interface: IPriceSubmitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFtsoManager: TypedContractMethod<[], [string], "view">;

  getFtsoRegistry: TypedContractMethod<[], [string], "view">;

  getVoterWhitelister: TypedContractMethod<[], [string], "view">;

  revealPrices: TypedContractMethod<
    [
      _epochId: BigNumberish,
      _ftsoIndices: BigNumberish[],
      _prices: BigNumberish[],
      _randoms: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  submitPriceHashes: TypedContractMethod<
    [
      _epochId: BigNumberish,
      _ftsoIndices: BigNumberish[],
      _hashes: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  voterWhitelistBitmap: TypedContractMethod<
    [_voter: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFtsoManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFtsoRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVoterWhitelister"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revealPrices"
  ): TypedContractMethod<
    [
      _epochId: BigNumberish,
      _ftsoIndices: BigNumberish[],
      _prices: BigNumberish[],
      _randoms: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitPriceHashes"
  ): TypedContractMethod<
    [
      _epochId: BigNumberish,
      _ftsoIndices: BigNumberish[],
      _hashes: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voterWhitelistBitmap"
  ): TypedContractMethod<[_voter: AddressLike], [bigint], "view">;

  getEvent(
    key: "PriceHashesSubmitted"
  ): TypedContractEvent<
    PriceHashesSubmittedEvent.InputTuple,
    PriceHashesSubmittedEvent.OutputTuple,
    PriceHashesSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "PricesRevealed"
  ): TypedContractEvent<
    PricesRevealedEvent.InputTuple,
    PricesRevealedEvent.OutputTuple,
    PricesRevealedEvent.OutputObject
  >;

  filters: {
    "PriceHashesSubmitted(address,uint256,address[],bytes32[],uint256)": TypedContractEvent<
      PriceHashesSubmittedEvent.InputTuple,
      PriceHashesSubmittedEvent.OutputTuple,
      PriceHashesSubmittedEvent.OutputObject
    >;
    PriceHashesSubmitted: TypedContractEvent<
      PriceHashesSubmittedEvent.InputTuple,
      PriceHashesSubmittedEvent.OutputTuple,
      PriceHashesSubmittedEvent.OutputObject
    >;

    "PricesRevealed(address,uint256,address[],uint256[],uint256[],uint256)": TypedContractEvent<
      PricesRevealedEvent.InputTuple,
      PricesRevealedEvent.OutputTuple,
      PricesRevealedEvent.OutputObject
    >;
    PricesRevealed: TypedContractEvent<
      PricesRevealedEvent.InputTuple,
      PricesRevealedEvent.OutputTuple,
      PricesRevealedEvent.OutputObject
    >;
  };
}
